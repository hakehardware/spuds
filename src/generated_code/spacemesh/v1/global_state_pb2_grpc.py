# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from src.generated_code.spacemesh.v1 import global_state_types_pb2 as spacemesh_dot_v1_dot_global__state__types__pb2


class GlobalStateServiceStub(object):
    """Readonly global state data - current and historical.
    Global state data is data which is not explicitly stored in the mesh.
    Global state is modified only by the state transition function.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GlobalStateHash = channel.unary_unary(
                '/spacemesh.v1.GlobalStateService/GlobalStateHash',
                request_serializer=spacemesh_dot_v1_dot_global__state__types__pb2.GlobalStateHashRequest.SerializeToString,
                response_deserializer=spacemesh_dot_v1_dot_global__state__types__pb2.GlobalStateHashResponse.FromString,
                )
        self.Account = channel.unary_unary(
                '/spacemesh.v1.GlobalStateService/Account',
                request_serializer=spacemesh_dot_v1_dot_global__state__types__pb2.AccountRequest.SerializeToString,
                response_deserializer=spacemesh_dot_v1_dot_global__state__types__pb2.AccountResponse.FromString,
                )
        self.AccountDataQuery = channel.unary_unary(
                '/spacemesh.v1.GlobalStateService/AccountDataQuery',
                request_serializer=spacemesh_dot_v1_dot_global__state__types__pb2.AccountDataQueryRequest.SerializeToString,
                response_deserializer=spacemesh_dot_v1_dot_global__state__types__pb2.AccountDataQueryResponse.FromString,
                )
        self.SmesherDataQuery = channel.unary_unary(
                '/spacemesh.v1.GlobalStateService/SmesherDataQuery',
                request_serializer=spacemesh_dot_v1_dot_global__state__types__pb2.SmesherDataQueryRequest.SerializeToString,
                response_deserializer=spacemesh_dot_v1_dot_global__state__types__pb2.SmesherDataQueryResponse.FromString,
                )
        self.AccountDataStream = channel.unary_stream(
                '/spacemesh.v1.GlobalStateService/AccountDataStream',
                request_serializer=spacemesh_dot_v1_dot_global__state__types__pb2.AccountDataStreamRequest.SerializeToString,
                response_deserializer=spacemesh_dot_v1_dot_global__state__types__pb2.AccountDataStreamResponse.FromString,
                )
        self.SmesherRewardStream = channel.unary_stream(
                '/spacemesh.v1.GlobalStateService/SmesherRewardStream',
                request_serializer=spacemesh_dot_v1_dot_global__state__types__pb2.SmesherRewardStreamRequest.SerializeToString,
                response_deserializer=spacemesh_dot_v1_dot_global__state__types__pb2.SmesherRewardStreamResponse.FromString,
                )
        self.AppEventStream = channel.unary_stream(
                '/spacemesh.v1.GlobalStateService/AppEventStream',
                request_serializer=spacemesh_dot_v1_dot_global__state__types__pb2.AppEventStreamRequest.SerializeToString,
                response_deserializer=spacemesh_dot_v1_dot_global__state__types__pb2.AppEventStreamResponse.FromString,
                )
        self.GlobalStateStream = channel.unary_stream(
                '/spacemesh.v1.GlobalStateService/GlobalStateStream',
                request_serializer=spacemesh_dot_v1_dot_global__state__types__pb2.GlobalStateStreamRequest.SerializeToString,
                response_deserializer=spacemesh_dot_v1_dot_global__state__types__pb2.GlobalStateStreamResponse.FromString,
                )


class GlobalStateServiceServicer(object):
    """Readonly global state data - current and historical.
    Global state data is data which is not explicitly stored in the mesh.
    Global state is modified only by the state transition function.
    """

    def GlobalStateHash(self, request, context):
        """Latest computed global state - layer and its root hash
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Account(self, request, context):
        """Account info in the current global state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AccountDataQuery(self, request, context):
        """Query for account related data such as rewards, tx receipts and account info

        Note: it might be too expensive to add a param for layer to get these results from
        as it may require indexing all global state changes per account by layer.
        If it is possible to index by layer then we should add param start_layer to
        AccountDataParams. Currently it will return data from genesis.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SmesherDataQuery(self, request, context):
        """Query for smesher data. Currently returns smesher rewards.
        Note: Not supporting start_layer yet as it may require to index all rewards by
        smesher and by layer id or allow for queries from a layer and later....
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AccountDataStream(self, request, context):
        """//////// Streams

        Get a stream of account related changes such as account balance change,
        tx receipts and rewards
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SmesherRewardStream(self, request, context):
        """Rewards awarded to a smesher id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppEventStream(self, request, context):
        """App Events - emitted by app methods impl code trigged by an
        app transaction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GlobalStateStream(self, request, context):
        """TODO: we need to add an important method here to return events emitted by
        a specific app instance...

        New global state computed for a layer by the STF
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GlobalStateServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GlobalStateHash': grpc.unary_unary_rpc_method_handler(
                    servicer.GlobalStateHash,
                    request_deserializer=spacemesh_dot_v1_dot_global__state__types__pb2.GlobalStateHashRequest.FromString,
                    response_serializer=spacemesh_dot_v1_dot_global__state__types__pb2.GlobalStateHashResponse.SerializeToString,
            ),
            'Account': grpc.unary_unary_rpc_method_handler(
                    servicer.Account,
                    request_deserializer=spacemesh_dot_v1_dot_global__state__types__pb2.AccountRequest.FromString,
                    response_serializer=spacemesh_dot_v1_dot_global__state__types__pb2.AccountResponse.SerializeToString,
            ),
            'AccountDataQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.AccountDataQuery,
                    request_deserializer=spacemesh_dot_v1_dot_global__state__types__pb2.AccountDataQueryRequest.FromString,
                    response_serializer=spacemesh_dot_v1_dot_global__state__types__pb2.AccountDataQueryResponse.SerializeToString,
            ),
            'SmesherDataQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.SmesherDataQuery,
                    request_deserializer=spacemesh_dot_v1_dot_global__state__types__pb2.SmesherDataQueryRequest.FromString,
                    response_serializer=spacemesh_dot_v1_dot_global__state__types__pb2.SmesherDataQueryResponse.SerializeToString,
            ),
            'AccountDataStream': grpc.unary_stream_rpc_method_handler(
                    servicer.AccountDataStream,
                    request_deserializer=spacemesh_dot_v1_dot_global__state__types__pb2.AccountDataStreamRequest.FromString,
                    response_serializer=spacemesh_dot_v1_dot_global__state__types__pb2.AccountDataStreamResponse.SerializeToString,
            ),
            'SmesherRewardStream': grpc.unary_stream_rpc_method_handler(
                    servicer.SmesherRewardStream,
                    request_deserializer=spacemesh_dot_v1_dot_global__state__types__pb2.SmesherRewardStreamRequest.FromString,
                    response_serializer=spacemesh_dot_v1_dot_global__state__types__pb2.SmesherRewardStreamResponse.SerializeToString,
            ),
            'AppEventStream': grpc.unary_stream_rpc_method_handler(
                    servicer.AppEventStream,
                    request_deserializer=spacemesh_dot_v1_dot_global__state__types__pb2.AppEventStreamRequest.FromString,
                    response_serializer=spacemesh_dot_v1_dot_global__state__types__pb2.AppEventStreamResponse.SerializeToString,
            ),
            'GlobalStateStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GlobalStateStream,
                    request_deserializer=spacemesh_dot_v1_dot_global__state__types__pb2.GlobalStateStreamRequest.FromString,
                    response_serializer=spacemesh_dot_v1_dot_global__state__types__pb2.GlobalStateStreamResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'spacemesh.v1.GlobalStateService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GlobalStateService(object):
    """Readonly global state data - current and historical.
    Global state data is data which is not explicitly stored in the mesh.
    Global state is modified only by the state transition function.
    """

    @staticmethod
    def GlobalStateHash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spacemesh.v1.GlobalStateService/GlobalStateHash',
            spacemesh_dot_v1_dot_global__state__types__pb2.GlobalStateHashRequest.SerializeToString,
            spacemesh_dot_v1_dot_global__state__types__pb2.GlobalStateHashResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Account(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spacemesh.v1.GlobalStateService/Account',
            spacemesh_dot_v1_dot_global__state__types__pb2.AccountRequest.SerializeToString,
            spacemesh_dot_v1_dot_global__state__types__pb2.AccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AccountDataQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spacemesh.v1.GlobalStateService/AccountDataQuery',
            spacemesh_dot_v1_dot_global__state__types__pb2.AccountDataQueryRequest.SerializeToString,
            spacemesh_dot_v1_dot_global__state__types__pb2.AccountDataQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SmesherDataQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spacemesh.v1.GlobalStateService/SmesherDataQuery',
            spacemesh_dot_v1_dot_global__state__types__pb2.SmesherDataQueryRequest.SerializeToString,
            spacemesh_dot_v1_dot_global__state__types__pb2.SmesherDataQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AccountDataStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/spacemesh.v1.GlobalStateService/AccountDataStream',
            spacemesh_dot_v1_dot_global__state__types__pb2.AccountDataStreamRequest.SerializeToString,
            spacemesh_dot_v1_dot_global__state__types__pb2.AccountDataStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SmesherRewardStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/spacemesh.v1.GlobalStateService/SmesherRewardStream',
            spacemesh_dot_v1_dot_global__state__types__pb2.SmesherRewardStreamRequest.SerializeToString,
            spacemesh_dot_v1_dot_global__state__types__pb2.SmesherRewardStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppEventStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/spacemesh.v1.GlobalStateService/AppEventStream',
            spacemesh_dot_v1_dot_global__state__types__pb2.AppEventStreamRequest.SerializeToString,
            spacemesh_dot_v1_dot_global__state__types__pb2.AppEventStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GlobalStateStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/spacemesh.v1.GlobalStateService/GlobalStateStream',
            spacemesh_dot_v1_dot_global__state__types__pb2.GlobalStateStreamRequest.SerializeToString,
            spacemesh_dot_v1_dot_global__state__types__pb2.GlobalStateStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
